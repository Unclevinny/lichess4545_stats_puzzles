Text below is from @Kraaft
========================================

First of all thank you.
But sorry those scripts are very old and from a lot of different people (somethingpretentious, robumbra, forhavu myself and others I forget.)
I have tweaked them a lot for my personnal use. You should do the same. If you want to look at the original scripts go on there github. I hope I didn't do too much of a mess. I never put a lot of time in this and I'm just an amateur in that field.


______


You'll need python 3 and a bunch of module.
Just download the last version for each one that are required and named when you try to launch something that don't work.
Only for python-chess I think you'll need an earlier version. In case I'm wrong I'm copy pasting my pip list at the moment:

Package         Version
--------------- ---------
beautifulsoup4  4.7.1
bs4             0.0.1
certifi         2019.3.9
chardet         3.0.4
colorama        0.4.1
get             2019.4.13
idna            2.8
lxml            4.3.3
numpy           1.16.3
panda           0.3.1
pandas          0.24.2
pip             19.1.1
post            2019.4.13
public          2019.4.13
python-chess    0.27.3
python-dateutil 2.8.0
pytz            2019.1
query-string    2019.4.13
request         2019.4.13
requests        2.21.0
setuptools      40.8.0
six             1.12.0
soupsieve       1.9
urllib3         1.24.1
(Propably some of them are on this computer but not needed. Probably I have not the last version an some of them but it will work fine with the latest too. I didn't use that particular pc for a while.)


______

First you'll need to generate the stats.
Launch STAT/main.py
Then enter the league name in the console when asked (team4545 or lonewolf. The other ones are using pgn instead of automatically parsing the website.)
Then enter the season and the round you want to generate.

After it's finished all the games without analysis should open on your favorite browser.
When you have finished to click on the lichess analysis and when they're done (you'll have to be patient, I personally skip lonewolf stats sometimes just because there is so many people not asking for analysis at the end of their games...)

You'll need to delete the file that was generated in the folder STAT (for example "team4545GamesS22R(2, 3)" for the team4545 S22 R2)
Then you can do it all over again and this time with all the analysis done on lichess you'll have the correct stats generated written on your python console at the end.
You'll need to copy paste that to the ledger document. It is already formated for the django script there.

If you have an error before the end of the py script it means one of the games on the website is not standard (sometimes people have to restart a game in a middle of a position and it make everything go boom.)
So you'll need to find which one is breaking the script - it is the last one that was not analysed look at your console - then go on the website, find the ID of the game and put it in the list in the excludelist file, now you should be able to relaunch the script it will skip the bugged game.
You'll see the list of excluded player too in the excludelist file, put the cheaters there to not analyse there games.)

(Update 2020-10-06 by timothyha, I've added exception handling to just report a broken game link, so it looks like this "could not load game 105 / 647 RA5ZSxdj")

______

Now you need to extract the pgn of all the games. Just run extractpgn and put the name of the file in (ex: team4545GamesS22R(2, 3))
The PGN will appear in the same folder. You need to upload that file in the ledger document below the stat with a link.

______

You also need that pgn to extract the puzzle, so copy that to put it in the PUZZLE/PGNs folder.
Then you can run main.py in PUZZLE.
You need to execute it with 4 different arguments here's an exemple:
py main.py "PGNs/45.pgn" 10 1024 --quiet
Between quotes you need to have the pgn that you previously generated.
The first number is the number of CPU thread you want to dedicate to the analysis.
The second one is the RAM allocated.
The last one just make the console not flooded with useless info and let you keep track of what' happening.
If for any reason the script stop, don't worry you just go on the pgn file, delete all that you already have analysed and rerun it. It will restart where you stoped.

It will create a "generated puzzle" file. You can run the script as many time as you have pgns it will not delete previous puzzle in that file. That's why you'll need to delete or move that file away when you want to generate new puzzles without the previous ones (usually for the next week ledger)

______

Last step, you have to put "generated puzzle" in "HTML Generator/json" and run the main.py in "HTML Generator"
I think my instruction in the console are pretty clear but in case you want nothing fancy (meaning no manual puzzle shared by the comunity to add or no ordering of the puzzle done by someone before)
Then just type "exit" first and then "n" and it will generate the HTML for the puzzle you generated.
